---
- set_fact:
    csr: "{{openssl_node.name}}-req.csr"
    pub_key: "/tmp/{{openssl_node.name}}-pub.pem"
    remote_certconf_temp: "/tmp/openssl.cnf"
  tags: always

- name: Spin out remote openssl conf
  template:
    src: openssl.cnf.j2
    dest: "{{ remote_certconf_temp }}"

- name: Ensure local CA dirs exists
  local_action:
    module: file
    state: directory
    path: "{{ item }}"
  with_items:
    - "{{ openssl_node.local_ca_dir }}"
    - "{{ openssl_node.local_ca_dir }}/certs"
    - "{{ openssl_node.local_ca_dir }}/newcerts"
    - "{{ openssl_node.local_ca_dir }}/private"
    - "{{ openssl_node.local_ca_dir }}/csr"
  become: no

- name: Spin out local openssl conf if doesnt exist
  become: no
  template:
    src: openssl.cnf.j2
    dest: "{{ openssl_node_conf }}"
    force: no
  delegate_to: localhost

- name: Expand CA certs
  local_action:
    module: copy
    content: "{{ openssl_node_ca_cert_sign[item.key_name] }}"
    dest: "{{ item.dest }}"
  become: no
  with_items:
    - key_name: "ca_pub_key"
      dest: "{{ openssl_node.local_ca_dir }}/cacert.pem"
    - key_name: "ca_priv_key"
      dest: "{{ openssl_node.local_ca_dir }}/private/cakey.pem"
  no_log: true

- name: create CSR req
  command: >
    openssl req -new -nodes -out /tmp/{{ csr }}
    -keyout {{ privkey_dst }} -config {{ remote_certconf_temp }} -batch
    -newkey rsa:{{ openssl_node.bit_length }}
    -subj '/CN={{openssl_node.name}}'
  register: create_csr

- name: Set private key perms
  file:
    path: "{{ privkey_dst }}"
    owner: "{{ openssl_node_priv_owner }}"
    group: "{{ openssl_node_priv_group }}"
    mode: "{{ openssl_node_priv_mode }}"

- name: Pull back the CSR to local machine
  fetch:
    src: "/tmp/{{ csr }}"
    dest: "{{ openssl_node.local_ca_dir }}/csr/{{ csr }}"
    flat: yes
  tags: fetch

- name: Check for existence of crl list
  stat:
    path: "{{ openssl_node.local_ca_dir }}/crl.pem"
  register: crl_check_result
  tags: always

- name: Sign CSR using disposable CA environment
  command: >
    openssl x509 -req -in csr/{{ csr }}
    -CA cacert.pem
    -CAkey private/cakey.pem
    -out newcerts/{{ openssl_node.name }}.pem
    -set_serial {{ lookup('pipe', "date +'%s'") }}
    -days {{ openssl_node_expiration }} -extensions v3_req
    -extfile openssl.cnf -passin pass:{{ openssl_node_ca_creds }}
  delegate_to: localhost
  args:
    creates: "{{ openssl_node.local_ca_dir }}/newcerts/{{ openssl_node.name }}.pem"
    chdir: "{{ openssl_node.local_ca_dir }}"
  when: not crl_check_result.stat.exists
  become: no
  no_log: true

- name: Sign CSR under static CA environment
  command: >
    openssl ca -batch -config {{ openssl_node_conf }}
    -in {{ openssl_node.local_ca_dir }}/csr/{{ csr }}
    -out {{ openssl_node.local_ca_dir }}/newcerts/{{ openssl_node.name }}.pem
    -passin pass:{{ openssl_node_ca_creds }}
  delegate_to: localhost
  args:
    creates: "{{ openssl_node.local_ca_dir }}/newcerts/{{ openssl_node.name }}.pem"
    chdir: "{{ openssl_node.local_ca_dir }}"
  when: crl_check_result.stat.exists
  become: no

- name: Copy over signed cert to destination
  copy:
    src: "{{ openssl_node.local_ca_dir }}/newcerts/{{ openssl_node.name }}.pem"
    dest: "{{ pubkey_dst }}"

- name: Clean-up private CA key
  shell: "shred -u -z {{ openssl_node.local_ca_dir }}/private/*"
  delegate_to: localhost
  when: openssl_node_ca_destroy
  become: no
